// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static Array two_to_the;

    /** Initializes the library. */
    function void init() {
        /** Initializes the library. */
        let two_to_the = Array.new(16);
        let two_to_the[0] = 1;        let two_to_the[1] = 2;
        let two_to_the[2] = 4;        let two_to_the[3] = 8;
        let two_to_the[4] = 16;       let two_to_the[5] = 32;
        let two_to_the[6] = 64;       let two_to_the[7] = 128;
        let two_to_the[8] = 256;      let two_to_the[9] = 512;
        let two_to_the[10] = 1024;    let two_to_the[11] = 2048;
        let two_to_the[12] = 4096;    let two_to_the[13] = 8192;
        let two_to_the[14] = 16384;   let two_to_the[15] = 32764;
        // todo test two_to_the[15] as i've seen it as 16384+16384
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {return -x;}
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i, mask, shiftedX;
        let shiftedX = x;
        let sum = 0;
        let i = 0;
        let mask = 1;
        while (i < 16){
            if ((y & mask) = mask){
                let sum = sum + shiftedX;
            }
            let mask = mask + mask;
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        if (y > x) {return 0;}
        let q = Math.divide(x, y*2);
        if (((x - 2) * q * y) < y){
            return 2 * q;
        }
        return (2 * q ) + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x)
    {
        var int y, p, j, approx, approx_squared;
        let y=0; let p=7; // p for power, half of 16 (number of bits) minus one
        while (~(p<0))
        {
            let approx =  y + two_to_the[p];
            let approx_squared = approx * approx;
            if ( ~(approx_squared > x ) & (approx_squared > 0))
            {
                let y = approx;
            }
            let p = p - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { return a;}
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) { return a;}
            return b;
    }
}
