// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
 class Math {
    /** Initializes the library. */
    static Array bitMap;

    function void init() {
        do Math.initBitMap();
        return;
    }

    function void initBitMap() {
        var int i, j;
        let i = 0;
        let j = 1;
        let bitMap = Array.new(15);
        while(i < 15) {
            let bitMap[i] = j;
            let j = ^j;
            let i = i+1;
        }
        return;
    }
    /*
        /*
        let bitMap[0] = 1;
        let bitMap[1] = 2;
        let bitMap[2] = 4;
        let bitMap[3] = 8;
        let bitMap[4] = 16;
        let bitMap[5] = 32;
        let bitMap[6] = 64;
        let bitMap[7] = 128;
        let bitMap[8] = 256;
        let bitMap[9] = 512;
        let bitMap[10] = 1024;
        let bitMap[11] = 2048;
        let bitMap[12] = 4096;
        let bitMap[13] = 8192;
        let bitMap[14] = 16384;
        let bitMap[15] = 32768;

    */

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        }
        return -x;
    }

    /** 
     * Returns the product of x and y. 
     * When a Jack compiler detects the multiplication operator '*' in the 
     * program's code, it handles it by invoking this method. In other words,
     * the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        // Pseudocode:
        // 1. let sum = 0
        // 2. let shiftedx = x
        // 3. for i = 0 ... n-1 do
        // 4.   if ((i-th bit of y) == 1)
        // 5.      let sum = sum + shiftedx
        // 6.   let shiftedx = 2*shiftedx
        // 7. return sum
        var int sum, shiftedX, i, j, sign;
        let sum = 0;
        let i = 0;
        let sign = 1;
        if (x < 0) {
            let sign = -sign;
            let x = -x;
        }
        if (y < 0) {
            let sign = -sign;
            let y = -y;
        }
        let shiftedX = x;
        while (i < 15) {

            if((y & bitMap[i]) = bitMap[i]) {
                let sum = sum + shiftedX;
            }
            let shiftedX = ^shiftedX;
            let i = i+1;
        }
        if (sign < 0) {
            return -sum;
        }
        return sum;
    }



    /** 
     * Returns the integer part of x/y.
     * When a Jack compiler detects the multiplication operator '/' in the 
     * program's code, it handles it by invoking this method. In other words,
     * the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        // This should be implemented without using multiplication.
        // Hint: updating the value of 2*q*y in the "if" statement requires
        // at most a single addition operator at every recursion step.
        // Pseudocode:
        // 1. if (y > x) return 0
        // 2. let q = divide(x, 2*y)
        // 3. if ((x - 2*q*y) < y)
        // 4.   return 2*q
        // 5. else
        // 6.   return 2*q + 1
        var int sign,q,yq,upperY;
        let sign = 1;
        if (x < 0) {
            let sign = -sign;
            let x = -x;
        }
        if (y < 0) {
            let sign = -sign;
            let y = -y;
        }
        if (y>x) {
            return 0;
        }
        let q=0;
        let yq=0;
        let upperY=y;
        while((~((^upperY)>x))&((^upperY)>0)){
            let upperY=^upperY;
        }
        while(~(upperY<y)){
            if ((x - yq)<upperY) {
                let q= ^q;
            }
            else {
                let q= (^q) + 1;
                let yq= yq+upperY;
            }
            let upperY=#upperY;
        }
        if (sign < 0) {
            return -q;
        }
        return q;
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // This should be implemented without using multiplication or division.
        // Pseudocode (where '**' is the mathematical power function):
        // 1. let y = 0
        // 2. for j = (n/2 - 1) ... 0 do
        // 3.   if ((y + 2*j)2 <= x) then let y = y + 2*j
        // 4. return y
        var int y,j,i,square,toSquare;
        let y = 0;
        let j = 7;
        while (~(j<0)) {
            let toSquare=y+bitMap[j];
            let square=0;
            let i=0;
            while(~(i>toSquare)){
                let square=square+((^i)-1);
                let i=i+1;
            }
            if(~(square > x) & (square > 0)) {
                let y = y + bitMap[j];
            }
            let j = j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a>b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a>b) {
            return b;
        }
        return a;
    }
}