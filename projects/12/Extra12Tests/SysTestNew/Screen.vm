function Screen.init 2
push constant 0
pop local 0
push constant 1
pop local 1
push constant 16
call Array.new 1
pop static 4
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 4
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
shiftleft
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 16384
pop static 3
push constant 0
pop static 1
push constant 1
neg
pop static 2
push static 2
pop static 0
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8192
lt
not
if-goto WHILE_END0
push local 0
push static 3
add
push static 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop static 0
goto IF_END0
label IF_FALSE0
push constant 0
pop static 0
label IF_END0
push constant 0
return
function Screen.drawPixel 3
push argument 1
shiftleft
shiftleft
shiftleft
shiftleft
shiftleft
push argument 0
shiftright
shiftright
shiftright
shiftright
add
pop local 0
push local 0
push static 3
add
pop pointer 1
push that 0
pop local 2
push argument 0
push constant 15
and
push static 4
add
pop pointer 1
push that 0
pop local 1
push local 1
not
push local 2
and
push static 0
push static 1
eq
and
push local 1
push local 2
or
push static 0
push static 1
eq
not
and
or
pop local 2
push local 0
push static 3
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.drawLine 18
push argument 0
push argument 2
eq
push argument 1
push argument 3
eq
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push argument 3
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
pop local 1
push argument 2
push argument 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 2
pop local 17
push argument 0
pop argument 2
push local 17
pop argument 0
label IF_FALSE2
push local 1
shiftleft
shiftleft
shiftleft
shiftleft
shiftleft
push argument 0
shiftright
shiftright
shiftright
shiftright
add
pop local 9
push local 9
push static 3
add
pop pointer 1
push that 0
pop local 11
push local 1
shiftleft
shiftleft
shiftleft
shiftleft
shiftleft
push argument 2
shiftright
shiftright
shiftright
shiftright
add
pop local 10
push local 10
push static 3
add
pop pointer 1
push that 0
pop local 12
push argument 2
shiftright
shiftright
shiftright
shiftright
push argument 0
shiftright
shiftright
shiftright
shiftright
sub
pop local 13
push argument 0
push constant 15
and
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
neg
pop local 14
goto IF_END3
label IF_FALSE3
push argument 0
push constant 15
and
push static 4
add
pop pointer 1
push that 0
push constant 1
sub
not
pop local 14
label IF_END3
push argument 2
push constant 15
and
push constant 15
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 1
neg
pop local 15
goto IF_END4
label IF_FALSE4
push argument 2
push constant 1
add
push constant 15
and
push static 4
add
pop pointer 1
push that 0
push constant 1
sub
pop local 15
label IF_END4
push local 13
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 9
push static 3
add
push local 14
push local 15
and
not
push local 11
and
push static 0
push static 1
eq
and
push local 14
push local 15
and
push local 11
or
push static 0
push static 1
eq
not
and
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE5
push constant 1
pop local 16
push local 9
push static 3
add
push local 14
not
push local 11
and
push static 0
push static 1
eq
and
push local 14
push local 11
or
push static 0
push static 1
eq
not
and
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_EXP0
push local 16
push local 13
lt
not
if-goto WHILE_END0
push local 9
push local 16
add
push static 3
add
push static 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 16
push constant 1
add
pop local 16
goto WHILE_EXP0
label WHILE_END0
push local 10
push static 3
add
push local 15
not
push local 12
and
push static 0
push static 1
eq
and
push local 15
push local 12
or
push static 0
push static 1
eq
not
and
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE1
push argument 0
pop local 0
push argument 1
pop local 1
push constant 0
pop local 2
push constant 0
pop local 3
push constant 0
pop local 4
push argument 0
push argument 2
sub
call Math.abs 1
pop local 5
push argument 1
push argument 3
sub
call Math.abs 1
pop local 6
push constant 1
pop local 7
push constant 1
pop local 8
push argument 0
push argument 2
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 1
neg
pop local 7
label IF_FALSE6
push argument 1
push argument 3
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 1
neg
pop local 8
label IF_FALSE7
label WHILE_EXP1
push local 2
call Math.abs 1
push local 5
gt
not
push local 3
call Math.abs 1
push local 6
gt
not
and
not
if-goto WHILE_END1
push local 0
push local 2
add
push local 1
push local 3
add
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 2
push local 7
add
pop local 2
push local 4
push local 6
add
pop local 4
goto IF_END8
label IF_FALSE8
push local 3
push local 8
add
pop local 3
push local 4
push local 5
sub
pop local 4
label IF_END8
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 1
push argument 3
gt
not
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 2
push argument 1
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 2
label WHILE_EXP0
push local 0
push argument 2
eq
not
not
if-goto WHILE_END0
push local 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 0
push local 1
sub
push argument 1
push local 0
add
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
