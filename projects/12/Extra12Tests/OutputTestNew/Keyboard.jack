// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library for handling user input from the keyboard.
 */
 class Keyboard {
    static int keyboard;
    /** Initializes the keyboard. */
    function void init() {
        let keyboard = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        // Uses Memory.peek
        return Memory.peek(keyboard);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        // This should behave exactly like the built-in OS.
        // Pseudocode:
        // 1. display the cursor
        // 2. while (keyPressed() = 0): do nothing
        // 3. let c = code of the currently pressed key
        // 4. while (~(keyPressed() = 0)): do nothing
        // 5. display c at the current cursor location
        // 6. advance the cursor
        // 7. return c
        var char key;
        do Output.printChar(0);
        while(Keyboard.keyPressed()=0) {}
        let key = Keyboard.keyPressed();
        while(~(Keyboard.keyPressed()=0)) {}
        do Output.backSpace();
        do Output.printChar(key);
        return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces if the current value
     * is longer than a single character.
     */
    function String readLine(String message) {
        // This should behave exactly like the built-in OS.
        // You can assume input is at most 64 characters long.
        // Why? Because this is the width of our screen!
        // Pseudocode:
        // 1. printString(message)
        // 2. let str = ""
        // 3. while true
        // 4.   let c = readChar()
        // 5.   if (c = newLine)
        // 6.      display newLine (if not displayed already by readChar())
        // 7.      return str
        // 8.   else if (c = backSpace)
        // 9.      remove the last character from str, if possible
        // 10.     move the cursor accordingly
        // 11.  else
        // 12.    str.appendChar(c)
        var String str;
        var char c;
        do Output.printString(message);
        let str = String.new(64);
        while (true) {
            let c = Keyboard.readChar();
            if (c = String.newLine()) {
                return str;
            }
            else {
                if (c = String.backSpace()) {
                    do str.eraseLastChar();
                }
                else {
                    do str.appendChar(c);
                }
            }
        }
        return str;
    }     

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        // This should behave exactly like the built-in OS.
         var String str;
        var int pos;
        var boolean flag;
        let pos=0;
        let str=Keyboard.readLine(message);
        // 45 is ASCII code for minus sign
        if(str.charAt(0)=45){
            let pos=pos+1;
        }
        let flag=true;
        while((pos<str.length())&flag){
            // all chars between 47<c<58 are digits
            if((str.charAt(pos)>47)&(str.charAt(pos)<58)){
                let pos=pos+1;
            }
            else{
                let flag=false;
            }
        }
        while(str.length()>pos){
            do str.eraseLastChar();
        }
        return str.intValue();
    }
    
}
