// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
 class String {
    field int length;
    field Array str;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let str = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) { 
        let str[length] = c;
        let length = length + 1;
        return this; 
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }


    function char charValue(int val) {
        return 48+val;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val, i;
        var boolean neg;
        let val = 0;
        let i = 0;
        let neg = false;
        // check if is negative number
        if (str[0] = 45) {
            let neg = true;
            let i= i+1;
        }
        while(~((~(i < length)) | (48 > str[i]) | (str[i] > 57))) {
            let val = val*10 + (str[i]-48);
            let i = i+1;
        }
        if (neg) {
            return -val;
        }
        return val;
    }

    function int modulu10(int a) {
        /* a mod 10 = (a mod 2) + 2*(a/2 mod 5) */
        var int b;
        let b = a & 1;           /* b = a mod 2 */
        let a = #a;			  /* a = a / 2   */
        /* a mod 5 */
        let a = (########a) + (a & 255);    /* sum base 2**8 digits */
        let a = (####a) + (a & 15);    /* sum base 2**4 digits */
        let a = (####a) + (a & 15);    /* sum base 2**4 digits */
        if (a > 14) {
            let a = a - 15;
        }
        if (a > 4) { 
            let a = a - 5;
        }
        if (a > 4) { 
            let a = a - 5;
        }
        return b + (^a);
    }

    method void int2String(int val) {
        var int lastDigit,q;
        var char c;
        let lastDigit = String.modulu10(val);
        let c = String.charValue(lastDigit);
        if (val < 10) {
            do appendChar(c);
        }
        else {
            // Quick division by 10
            let q = #((###val) + val);
            let q = ###(q + val);
            let q = #(q + val);
            let q = ###(q + val);
            let q = #(q + val);
            let q = ####(q + val);
            do int2String(q);
            do appendChar(c);
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        let length = 0;
        if (val < 0) {
            let str[0] = 45;
            let length = 1;
            let val = -val;
        }
        do int2String(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
