// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1 the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", .
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // ALU Logic
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=ALUOut, zr=ALUZero, ng=ALUnegative);
     // Shift Logic
     Mux16(a=y, b=x, sel=instruction[4], out=ToShift);
     ShiftRight(in=ToShift,out=RShifted);
     ShiftLeft(in=ToShift,out=LShifted);
     Mux16(a=RShifted, b=LShifted, sel=instruction[5], out[0..7]=ShiftedA, out[8..15]=ShiftedB, out[15]=ShiftNegative);
     // Shift Flags
     Or8Way(in=ShiftedA, out=zFlag1);
     Or8Way(in=ShiftedB, out=zFlag2);
     Or(a=zFlag1, b=zFlag2, out=Nzr);
     Not(in=Nzr, out=ShiftedZero);
     // Flag selection
     Mux(a=ShiftedZero, b=ALUZero, sel=instruction[8], out=zr);
     Mux(a=ShiftNegative, b=ALUnegative, sel=instruction[8], out=ng);
     // Output selection
     Mux4Way16(a=x, b[0..7]=ShiftedA, b[8..15]=ShiftedB, c=y, d=ALUOut, sel=instruction[7..8], out=out);
}
